language: bash

services:
  - docker

env:
  # primary
  - DOCKERFILE="Dockerfile.primary" ROLE="primary" TAG_SUFFIX="amd64" ARCH=amd64 QEMU_VERSION=v3.1.0-2 QEMU_ARCH=x86_64
  - DOCKERFILE="Dockerfile.primary" ROLE="primary" TAG_SUFFIX="arm32v6" ARCH=arm32v6 QEMU_VERSION=v3.1.0-2 QEMU_ARCH=arm
  - DOCKERFILE="Dockerfile.primary" ROLE="primary" TAG_SUFFIX="arm64v8" ARCH=arm64v8 QEMU_VERSION=v3.1.0-2 QEMU_ARCH=aarch64

  # replica
  - DOCKERFILE="Dockerfile.replica" ROLE="replica" TAG_SUFFIX="amd64" ARCH=amd64 QEMU_VERSION=v3.1.0-2 QEMU_ARCH=x86_64 GOSU_VERSION=1.11 GOSU_ARCH=amd64
  - DOCKERFILE="Dockerfile.replica" ROLE="replica" TAG_SUFFIX="arm32v6" ARCH=arm32v6 QEMU_VERSION=v3.1.0-2 QEMU_ARCH=arm GOSU_VERSION=1.11 GOSU_ARCH=arm
  - DOCKERFILE="Dockerfile.replica" ROLE="replica" TAG_SUFFIX="arm64v8" ARCH=arm64v8 QEMU_VERSION=v3.1.0-2 QEMU_ARCH=aarch64 GOSU_VERSION=1.11 GOSU_ARCH=arm64

before_script:
  # setup multi-arch build support
  - sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
  - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  - mkdir tmp && cd tmp
  - curl -L -o qemu-x86_64-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/$QEMU_VERSION/qemu-x86_64-static.tar.gz && tar xzf qemu-x86_64-static.tar.gz
  - curl -L -o qemu-arm-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/$QEMU_VERSION/qemu-arm-static.tar.gz && tar xzf qemu-arm-static.tar.gz
  - curl -L -o qemu-aarch64-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/$QEMU_VERSION/qemu-aarch64-static.tar.gz && tar xzf qemu-aarch64-static.tar.gz
  - curl -L -o gosu-amd64 https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64
  - curl -L -o gosu-arm https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-armhf
  - curl -L -o gosu-arm64 https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-arm64
  - cd ..

script:
  # generate the image tag
  - export TARGET_IMAGE_TAG=$(if [ "$TRAVIS_BRANCH" = "master" ]; then if [ "$TAG_SUFFIX" = "" ]; then echo "latest"; else echo "$TAG_SUFFIX"; fi; else if [ "$TAG_SUFFIX" = "" ]; then echo "$TRAVIS_BRANCH"; else echo "$TRAVIS_BRANCH-$TAG_SUFFIX"; fi; fi)

  # pull the existing image from the registry, if it exists, to use as a build cache
  - docker pull $TARGET_IMAGE-$ROLE:$TARGET_IMAGE_TAG && export IMAGE_CACHE="--cache-from $TARGET_IMAGE-$ROLE:$TARGET_IMAGE_TAG" || export IMAGE_CACHE=""

  # build the image, login and push
  - docker build -f $DOCKERFILE $IMAGE_CACHE --build-arg ARCH=$ARCH --build-arg QEMU_ARCH=$QEMU_ARCH --build-arg GOSU_ARCH=$GOSU_ARCH -t $TARGET_IMAGE-$ROLE:$TARGET_IMAGE_TAG .
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker push $TARGET_IMAGE-$ROLE:$TARGET_IMAGE_TAG

jobs:
  include:
    - stage: manifest
      script:
        # update docker to edge
        - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157
        - sudo apt update -y
        - sudo apt install --only-upgrade docker-ce -y

        # enable experimental to use docker manifest command
        - mkdir $HOME/.docker
        - |-
          echo '{"experimental": "enabled"}' | tee $HOME/.docker/config.json
        - |-
          echo '{"experimental": true,"storage-driver": "overlay2","max-concurrent-downloads": 50,"max-concurrent-uploads": 50}' | sudo tee /etc/docker/daemon.json
        - sudo service docker restart

        # login
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

        # primary
        - export MANIFEST_SUFFIX=$(if [ "$TRAVIS_BRANCH" = "master" ]; then echo "latest"; else echo "$TRAVIS_BRANCH"; fi)
        - export TAG_PREFIX=$(if [ "$TRAVIS_BRANCH" = "master" ]; then echo ""; else echo "$TRAVIS_BRANCH-"; fi)
        - docker manifest create $TARGET_IMAGE-primary:$MANIFEST_SUFFIX $TARGET_IMAGE-primary:${TAG_PREFIX}amd64 $TARGET_IMAGE-primary:${TAG_PREFIX}arm32v6 $TARGET_IMAGE-primary:${TAG_PREFIX}arm64v8
        - docker manifest annotate $TARGET_IMAGE-primary:$MANIFEST_SUFFIX $TARGET_IMAGE-primary:${TAG_PREFIX}arm32v6 --os=linux --arch=arm --variant=v6
        - docker manifest annotate $TARGET_IMAGE-primary:$MANIFEST_SUFFIX $TARGET_IMAGE-primary:${TAG_PREFIX}arm64v8 --os=linux --arch=arm64 --variant=v8
        - docker manifest push $TARGET_IMAGE-primary:$MANIFEST_SUFFIX

        # amd64
        - docker manifest create $TARGET_IMAGE-primary:${TAG_PREFIX}amd64 $TARGET_IMAGE-primary:${TAG_PREFIX}amd64
        - docker manifest push $TARGET_IMAGE-primary:${TAG_PREFIX}amd64

        # arm32v6
        - docker manifest create $TARGET_IMAGE-primary:${TAG_PREFIX}arm32v6 $TARGET_IMAGE-primary:${TAG_PREFIX}arm32v6
        - docker manifest annotate $TARGET_IMAGE-primary:${TAG_PREFIX}arm32v6 $TARGET_IMAGE-primary:${TAG_PREFIX}arm32v6 --os=linux --arch=arm --variant=v6
        - docker manifest push $TARGET_IMAGE-primary:${TAG_PREFIX}arm32v6

        # arm64v8
        - docker manifest create $TARGET_IMAGE-primary:${TAG_PREFIX}arm64v8 $TARGET_IMAGE-primary:${TAG_PREFIX}arm64v8
        - docker manifest annotate $TARGET_IMAGE-primary:${TAG_PREFIX}arm64v8 $TARGET_IMAGE-primary:${TAG_PREFIX}arm64v8 --os=linux --arch=arm64 --variant=v8
        - docker manifest push $TARGET_IMAGE-primary:${TAG_PREFIX}arm64v8

        # replica
        - export MANIFEST_SUFFIX=$(if [ "$TRAVIS_BRANCH" = "master" ]; then echo "latest"; else echo "$TRAVIS_BRANCH"; fi)
        - export TAG_PREFIX=$(if [ "$TRAVIS_BRANCH" = "master" ]; then echo ""; else echo "$TRAVIS_BRANCH-"; fi)
        - docker manifest create $TARGET_IMAGE-replica:$MANIFEST_SUFFIX $TARGET_IMAGE-replica:${TAG_PREFIX}amd64 $TARGET_IMAGE-replica:${TAG_PREFIX}arm32v6 $TARGET_IMAGE-replica:${TAG_PREFIX}arm64v8
        - docker manifest annotate $TARGET_IMAGE-replica:$MANIFEST_SUFFIX $TARGET_IMAGE-replica:${TAG_PREFIX}arm32v6 --os=linux --arch=arm --variant=v6
        - docker manifest annotate $TARGET_IMAGE-replica:$MANIFEST_SUFFIX $TARGET_IMAGE-replica:${TAG_PREFIX}arm64v8 --os=linux --arch=arm64 --variant=v8
        - docker manifest push $TARGET_IMAGE-replica:$MANIFEST_SUFFIX

        # amd64
        - docker manifest create $TARGET_IMAGE-replica:${TAG_PREFIX}amd64 $TARGET_IMAGE-replica:${TAG_PREFIX}amd64
        - docker manifest push $TARGET_IMAGE-replica:${TAG_PREFIX}amd64

        # arm32v6
        - docker manifest create $TARGET_IMAGE-replica:${TAG_PREFIX}arm32v6 $TARGET_IMAGE-replica:${TAG_PREFIX}arm32v6
        - docker manifest annotate $TARGET_IMAGE-replica:${TAG_PREFIX}arm32v6 $TARGET_IMAGE-replica:${TAG_PREFIX}arm32v6 --os=linux --arch=arm --variant=v6
        - docker manifest push $TARGET_IMAGE-replica:${TAG_PREFIX}arm32v6

        # arm64v8
        - docker manifest create $TARGET_IMAGE-replica:${TAG_PREFIX}arm64v8 $TARGET_IMAGE-replica:${TAG_PREFIX}arm64v8
        - docker manifest annotate $TARGET_IMAGE-replica:${TAG_PREFIX}arm64v8 $TARGET_IMAGE-replica:${TAG_PREFIX}arm64v8 --os=linux --arch=arm64 --variant=v8
        - docker manifest push $TARGET_IMAGE-replica:${TAG_PREFIX}arm64v8
